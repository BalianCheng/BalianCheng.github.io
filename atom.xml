<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Balian&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codingbalian.online/"/>
  <updated>2016-12-24T06:08:19.544Z</updated>
  <id>http://www.codingbalian.online/</id>
  
  <author>
    <name>Balian Cheng</name>
    <email>393418737@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XML:DOM</title>
    <link href="http://www.codingbalian.online/2016/12/23/XML-DOM/"/>
    <id>http://www.codingbalian.online/2016/12/23/XML-DOM/</id>
    <published>2016-12-23T14:48:22.000Z</published>
    <updated>2016-12-24T06:08:19.544Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍DOM来解析XML文档内容。</p>
<blockquote>
<p>DOM基于树或基于对象，方便应用程序对数据和结构进行更改，且任何时候可以在树种上下导航。<br><a id="more"></a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍DOM来解析XML文档内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DOM基于树或基于对象，方便应用程序对数据和结构进行更改，且任何时候可以在树种上下导航。&lt;br&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
      <category term="DOM" scheme="http://www.codingbalian.online/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>XML:XSL转换</title>
    <link href="http://www.codingbalian.online/2016/12/22/XML-XSL/"/>
    <id>http://www.codingbalian.online/2016/12/22/XML-XSL/</id>
    <published>2016-12-22T14:34:33.000Z</published>
    <updated>2016-12-24T06:12:58.024Z</updated>
    
    <content type="html"><![CDATA[<p>XSL是基于XML的语言，用于显示XML的规范。<br><a id="more"></a></p>
<h2 id="1">XSL转换原理</h2><br>XSL样式表对XML文档转化的过程：<br>1. 根据XML文档构造源树，根据XSL规则将源树转化成结果树，转换协议为XSLT。<br>2. 生成结果树后进行解释，产生一种社和显示的格式（格式化）。<br><br>XSL处理器负责转换成。XML文档先被解析成DOM树存放在内存中，接着进行分析，每一个DOM树的节点都与一个模式相比较，匹配上按模板进行转换否则继续往下匹配。<br><h2 id="2">XSL文档结构</h2><br>XSL是扩展名为xsl的文本文件使用XML，其基本结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;</div><div class="line">&lt;xsl:template match=&quot;/&quot;&gt;</div><div class="line">	.....</div><div class="line">&lt;/xsl:template&gt;</div><div class="line">&lt;xsl:template match=&quot;指定的XML元素&quot;&gt;</div><div class="line">	.....</div><div class="line">&lt;/xsl:template&gt;</div><div class="line">	.....</div><div class="line">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure><br><br>把XSL样式表链接到XML文档:<code>&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;文件名.xsl&quot;?&gt;</code><br><br><h2 id="3">XSL模板</h2><br>XSL模板由两部分组成：匹配模式和执行，匹配模式指定文档中节点处理，执行定义输出。<br><em> 定义模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;xsl:template match=&quot;pattern&quot; name=&quot;name&quot; priority=&quot;number&quot; mode=&quot;mode&quot;&gt;</div><div class="line">	&lt;!--具体执行内容--&gt;</div><div class="line">&lt;/xsl:template&gt;</div></pre></td></tr></table></figure>

</em> match属性的pattern指定为<code>/</code>表示与根节点匹配，指定为为<em>表示与所有未指定规则的节点匹配。<br><code>match=&quot;(title|author)&quot;</code>表示匹配所有title和author元素，<code>match=&quot;(title/author)</code>表示匹配所有父节点为title的author元素

</em> xsl:apply-template：处理当前节点的所有子节点，总是包含在xsl:template元素中。<br><code>&lt;xsl:apply-template select=&quot;expression&quot; mode=&quot;nam&quot;/&gt;</code><br><em> select属性是一个Xpath表达式，规定要用模板来处理节点。值为’</em>‘时去整个节点集，省略则是整个节点的子节点与模板比较选择匹配的处理。<br><em> mode选择同元素定义的多种处理方法。<br><br><h2 id="4">常用属性</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#xsl:element 用于在输出文档创建节点</div><div class="line">&lt;xsl:element name=&quot;name&quot; namespace=&quot;URI&quot; use-attribute-sets=&quot;namelist&quot;&gt;</div><div class="line">	&lt;!--template--&gt;</div><div class="line">&lt;/xsl:element&gt;</div><div class="line">#xsl:attribute</div><div class="line">&lt;xsl:attribute name=&quot;attributename&quot; namespace=&quot;URI&quot;&gt;</div><div class="line">	&lt;!--template--&gt;</div><div class="line">&lt;/xsl:attribute&gt;</div><div class="line">#xsl:text</div><div class="line">&lt;xsl:text disable-output-escaping=&quot;yes|no&quot;&gt;</div><div class="line">	&lt;!--content--&gt;</div><div class="line">&lt;/xsl:text&gt;</div></pre></td></tr></table></figure>

 </em> name规定创建元素的名称<br> <em> namespace规定名称空间的URI
 </em> use-attribute-sets空格分隔属性集，包含需要添加的属性<br> <em> <code>xsl:text</code>用于输出文本节点包括文本、#PCDATA等
 </em> disable-output-escaping默认为no，输出时将对文本进行转义。如<code>&lt;</code>输出为<code>&amp;lt</code><br><br><h2 id="5">XSL节点选择</h2><br>XSL样式表中有一个根模板，从根模板开始匹配XML文档，处理时调用其他模板，要匹配模板和标记时要设计“标记匹配模式”。<br>使用元素名匹配<br>XSL处理器根据match提供的元素名称去XML文档提取该节点的数据，需要用到<code>xsl:value-of</code>元素，用于选取文档中某个元素的值并输出。<br><code>&lt;xsl:value-of select=&quot;expression&quot; disable-output-escaping=&quot;yes|no&quot;&gt;</code><br> <em> select属性值是XPath表达式，规定从哪个节点或属性来提取<br>使用路径匹配<br>通过详细的路径选择节点，即模板中的标记匹配模式可以由子标记、根标记、/、//共同组成。<br><code>&lt;xsl:template match=&quot;图书/书名&quot;&gt;</code>表示匹配图书下的任意书名子节点。<br><code>&lt;xsl:template match=&quot;//书名&quot;&gt;</code>表示匹配任意节点下的书名子节点。<br><br>使用匹配字符匹配
 </em> 根节点匹配符<code>&lt;xsl:template match=&quot;/&quot;&gt;</code><br> <em> 根源素匹配符`&lt;xsl:template match=”/</em>“&gt;<code>* 当前节点</code><xsl:template match="."><code>父节点</code><xsl:template match=".."><code>4. 使用元素属性匹配
使用</code>标记[@属性]<code>或</code>标记[@属性=’属性值’]`进行筛选匹配。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#xml文档</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;名单&gt;</div><div class="line">	&lt;姓名&gt;张三&lt;/姓名&gt;</div><div class="line">	&lt;姓名 ID=&quot;1&quot;&gt;李四&lt;/姓名&gt;</div><div class="line">&lt;/名单&gt;</div><div class="line">#获得李四数据</div><div class="line">&lt;xsl:template match=&quot;名单/姓名[@ID=&apos;1&apos;]&quot;&gt;</div><div class="line">	&lt;!--模板内容--&gt;</div><div class="line">&lt;/xsl:template&gt;</div></pre></td></tr></table></figure><br><br><h2 id="6">XSL控制指令</h2>

<ol>
<li>简单判断指令<code>&lt;xsl:if&gt;</code><ul>
<li>以元素名为条件<code>&lt;xsl:if match=&quot;元素名&quot;&gt;</code></li>
<li>以元素内容为条件<code>&lt;xsl:if test=&quot;元素名[.=元素内容]&quot;&gt;</code></li>
<li>以元素属性为条件<code>&lt;xsl:if match=&quot;.[@属性名称=&#39;属性值&#39;]&quot;&gt;</code></li>
<li>以元素属性为条件<code>&lt;xsl:if test=&quot;.[@属性名称=&#39;属性值&#39;]&quot;&gt;</code></li>
</ul>
</li>
<li><p>多条件判断指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;xsl:choose&gt;</div><div class="line">	&lt;xsl:when test=&quot;pattern&quot;&gt;</div><div class="line">		&lt;!--样式定义语句--&gt;</div><div class="line">	&lt;/xsl:when&gt;</div><div class="line">	&lt;xsl:when test=&quot;pattern&quot;&gt;</div><div class="line">		&lt;!--样式定义语句--&gt;</div><div class="line">	&lt;/xsl:when&gt;</div><div class="line">	......</div><div class="line">	&lt;xsl:otherwise&gt;</div><div class="line">		&lt;!--样式定义语句--&gt;</div><div class="line">	&lt;/xsl:otherwise&gt;</div><div class="line">&lt;/xsl:choose&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>循环处理指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;xsl:for-each select=&quot;pattern&quot; order-by=&quot;patternlist&quot;&gt;</div><div class="line">	&lt;xsl:value-of../&gt;</div><div class="line">&lt;/xsl:for-each&gt;</div></pre></td></tr></table></figure>
<ul>
<li>用于对多个节点继续相同的处理</li>
<li>select选择需要循环输出的节点元素</li>
<li>order-by默认与+使用升序，-使用降序</li>
<li><xsl:value-of>具体输出指定子节点内容</xsl:value-of></li>
</ul>
</li>
<li>输出内容排序<br><code>&lt;xsl:sort select=&quot;元素名&quot; order=&quot;ascending|descending&quot; case-order=&quot;upper-first|lower-first&quot; data-type=&quot;text|number|qname&quot; /&gt;</code><ul>
<li>xsl:sort作为xsl:apply-template或者xsl:for-each的子元素出现</li>
<li>data-type标书排序数据类型</li>
<li>select定义关键字</li>
<li>order设置升降序</li>
<li>case-order设置大小写字母排序</li>
</ul>
</li>
</ol>
<p></p><h2 id="7">XPath</h2><br>XPath用于XML文字导航，将节点划分成8种节点类型<p></p>
<ol>
<li>根节点：唯一，最上层。根源素是根节点的第一层子节点，一般包括两个子节点：xsl-stylesheet处理指令和根源素。</li>
<li>元素节点：对应文档中的每一元素，可以定义唯一的标识ID，可以有扩展：命名空间URI、本地命名。</li>
<li>文本节点：包含一组数据即CDATA包含的字符，没有紧邻的兄弟文本节点，没有扩展名。</li>
<li>属性节点：元素节点有一个关联的属性节点的集合，元素是属性节点的父节点，但属性节点却不是其父元素的子节点。通过查找元素的子节点可以单向匹配出元素的属性节点，且不同的元素节点不共有同一个属性节点。 </li>
<li>命名空间节点：每一个元素节点都有一个相关的命名空间节点集。在XML文档中，命名空间是通过保留属性声明的，它们与父元素之间的关系是单向的，并且不具有共享性。 </li>
<li>处理指令节点：对应于XML文档中的每一条处理指令。它也有扩展名，扩展名的本地命名指向处理对象，而命名空间部分为空。</li>
<li>注释节点：对应文档中的注释。 </li>
<li>上下文节点：是将要查询的XML文档树种的一个特定节点，可以认为是查询的起点。</li>
</ol>
<p></p><h2 id="8">XPath路径表达式</h2><br>位置路径可以是绝对的，也可以是相对的。绝对路径起始于正斜杠( / )。都包含位置步。<br>绝对位置路径:<code>/step/step/...</code><br>相对位置路径:<code>step/step/...</code><br>步的语法：<code>轴名称::节点测试[谓语]</code><br>步包括：<p></p>
<ul>
<li>轴:定义所选节点与当前节点之间的树关系</li>
<li>节点测试:识别某个轴内部的节点</li>
<li>谓词:更深入地提炼所选的节点集</li>
</ul>
<table>
<thead>
<tr>
<th>轴</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ancestor</td>
<td>选取当前节点的所有先辈</td>
</tr>
<tr>
<td>ancestor-or-self</td>
<td>选取当前节点的所有先辈以及当前节点本身</td>
</tr>
<tr>
<td>attribute</td>
<td>选取当前节点的所有属性</td>
</tr>
<tr>
<td>child</td>
<td>选取当前节点的所有子元素</td>
</tr>
<tr>
<td>descendant</td>
<td>选取当前节点的所有后代元素</td>
</tr>
<tr>
<td>descendant-or-self</td>
<td>选取当前节点的所有后代元素以及当前节点本身</td>
</tr>
<tr>
<td>following</td>
<td>选取文档中当前节点的结束标签之后的所有节点</td>
</tr>
<tr>
<td>namespace</td>
<td>选取当前节点的所有命名空间节点</td>
</tr>
<tr>
<td>parent</td>
<td>选取当前节点的父节点</td>
</tr>
<tr>
<td>preceding</td>
<td>选取文档中当前节点的开始标签之前的所有节点</td>
</tr>
<tr>
<td>preceding-sibling</td>
<td>选取当前节点之前的所有同级节点</td>
</tr>
<tr>
<td>self</td>
<td>选取当前节点</td>
</tr>
</tbody>
</table>
<p>节点测试允许从轴中选择特定的元素或者节点类型</p>
<ul>
<li>元素名称节点测试：指定与具有名称的节点匹配</li>
<li>“*”节点测试:指定轴中的所有元素</li>
<li>node()节点测试:指定轴中的所有元素</li>
<li>comment()节点测试：指定轴中的所有注释</li>
<li>text()指定轴中的所有文本</li>
<li>processing-instruction()节点测试：指定轴中所有的处理指令元素</li>
</ul>
<p>谓词用于对节点集进行更神的过滤，用于查找特定节点</p>
<table>
<thead>
<tr>
<th>谓词</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[position()=n]</td>
<td>选取当前节点的第n个节点</td>
</tr>
<tr>
<td>[last()]</td>
<td>选取当前节点的最后一个节点</td>
</tr>
<tr>
<td>[attribute::name]</td>
<td>选择所有拥有name属性的节点</td>
</tr>
<tr>
<td>[attribute::name1 and attribute::name2]</td>
<td>选取所有拥有名为name1、name2属性的节点</td>
</tr>
<tr>
<td>[nodename=value]</td>
<td>选取所有nodename子元素的值为value的节点</td>
</tr>
<tr>
<td>[count()]</td>
<td>返回符合条件的节点个数</td>
</tr>
</tbody>
</table>
<p>路径缩写表达式</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>原语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td>child::nodename</td>
</tr>
<tr>
<td>/</td>
<td>从根节点选取</td>
<td>..</td>
</tr>
<tr>
<td>//</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>
<td>/descendant-or-self::node()/</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
<td>self::node()</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点</td>
<td>parent::node()</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
<td>attribute::</td>
</tr>
</tbody>
</table>
<p>XPath标准函数:参考<a href="http://www.w3school.com.cn/xpath/xpath_functions.asp" target="_blank" rel="external">XPath、XQuery以及XSLT函数</a></p>
</xsl:template></xsl:template>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSL是基于XML的语言，用于显示XML的规范。&lt;br&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
      <category term="XSL" scheme="http://www.codingbalian.online/tags/XSL/"/>
    
  </entry>
  
  <entry>
    <title>用CSS显示XML</title>
    <link href="http://www.codingbalian.online/2016/12/22/XML-CSS/"/>
    <id>http://www.codingbalian.online/2016/12/22/XML-CSS/</id>
    <published>2016-12-22T12:11:40.000Z</published>
    <updated>2016-12-24T06:08:22.946Z</updated>
    
    <content type="html"><![CDATA[<p>在XML里用到过的CSS的一点点基础内容<br><a id="more"></a></p>
<p></p><h2 id="1">CSS基础</h2><br>CSS的定义语法由三部分构成：选择器(selector)，属性(property)，属性值(value)<br>基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">selector&#123;</div><div class="line">	property1:value;</div><div class="line">	property2:value;</div><div class="line">	.....</div><div class="line">	propertyN:value</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>CSS可以设置多个元素的选择器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">selector1, selector2, selector3&#123;</div><div class="line">	property1:value;</div><div class="line">	property2:value;</div><div class="line">	.....</div><div class="line">	propertyN:value</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>selector1、selector2、selector3公用同一种样式<br>类(class)选择器可以为同名的元素设置不同的样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Tag.class&#123;</div><div class="line">	property1:value;</div><div class="line">	property2:value;</div><div class="line">	.....</div><div class="line">	propertyN:value</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#XML</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;book.css&quot;?&gt;</div><div class="line">&lt;DocumentElement&gt;</div><div class="line">	&lt;book Class=&quot;1&quot;&gt;</div><div class="line">		&lt;name&gt;数据挖掘&lt;/name&gt;</div><div class="line">		&lt;price&gt;16&lt;/price&gt;</div><div class="line">	&lt;/book&gt;</div><div class="line">	&lt;book Class=&quot;2&quot;&gt;</div><div class="line">		&lt;name&gt;机器学习&lt;/name&gt;</div><div class="line">		&lt;price&gt;18&lt;/price&gt;</div><div class="line">	&lt;/book&gt;</div><div class="line">&lt;/DocumentElement&gt;</div><div class="line">#CSS</div><div class="line">	book&#123;</div><div class="line">		display:block;</div><div class="line">		margin-top:16px</div><div class="line">		&#125;</div><div class="line">	name&#123;</div><div class="line">		display:block;</div><div class="line">		font-weight:bold</div><div class="line">		&#125;</div><div class="line">	book.1&#123;</div><div class="line">		font-size:18px</div><div class="line">		&#125;</div><div class="line">	book.2&#123;</div><div class="line">		font-style:italic;</div><div class="line">		font-size:16px</div><div class="line">		&#125;</div><div class="line">	name,price&#123;</div><div class="line">		margin:16px</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>标识(ID)选择器：唯一标识一个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Tag#ID&#123;</div><div class="line">	property1:value;</div><div class="line">	property2:value;</div><div class="line">	.....</div><div class="line">	propertyN:value</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><h2 id="2">CSS属性</h2><br>display常用属性<p></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不显示</td>
</tr>
<tr>
<td>block</td>
<td>块级元素，换行与别的元素分开</td>
</tr>
<tr>
<td>inline</td>
<td>默认，同一行显示</td>
</tr>
<tr>
<td>list-item</td>
<td>作为列表显示</td>
</tr>
</tbody>
</table>
<p>font常用属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>font-family</td>
<td>字体</td>
</tr>
<tr>
<td>font-size</td>
<td>尺寸</td>
</tr>
<tr>
<td>font-style</td>
<td>字形样式</td>
</tr>
<tr>
<td>font-variant</td>
<td>大小写</td>
</tr>
<tr>
<td>font-weight</td>
<td>粗细</td>
</tr>
</tbody>
</table>
<p>CSS可以使用color指定元素字体颜色</p>
<p>CSS允许添加边框</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无边框</td>
</tr>
<tr>
<td>dotted</td>
<td>点状边框</td>
</tr>
<tr>
<td>dashed</td>
<td>虚线</td>
</tr>
<tr>
<td>solid</td>
<td>实线</td>
</tr>
<tr>
<td>double</td>
<td>双线</td>
</tr>
<tr>
<td>groove</td>
<td>3D 凹槽边框</td>
</tr>
<tr>
<td>ridge</td>
<td>3D 垄状边框</td>
</tr>
<tr>
<td>inset</td>
<td>3D inset 边框</td>
</tr>
<tr>
<td>outset</td>
<td>3D outset 边框</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承</td>
</tr>
</tbody>
</table>
<p>XML背景属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-color</td>
<td>背景颜色</td>
</tr>
<tr>
<td>background-position</td>
<td>背景图像的位置</td>
</tr>
<tr>
<td>background-size</td>
<td>规定背景图片的尺寸</td>
</tr>
<tr>
<td>background-repeat</td>
<td>规定如何重复背景图像</td>
</tr>
<tr>
<td>background-origin</td>
<td>背景图片的定位区域</td>
</tr>
<tr>
<td>background-clip</td>
<td>规定背景的绘制区域</td>
</tr>
<tr>
<td>background-attachment</td>
<td>规定背景图像是否固定</td>
</tr>
<tr>
<td>background-image</td>
<td>背景图像</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承</td>
</tr>
</tbody>
</table>
<p>更多属性参考<a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="external">CSS参考手册</a></p>
<p>链接样式：在xml中加入<code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;样式名.css&quot;?&gt;</code><br>或者<code>@import url(stylesheetURL)</code><br>无需链接的内部CSS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml-stylesheet type=&quot;text/css&quot;?&gt;</div><div class="line">&lt;根源素 xmlns:HTML=&quot;URL&quot;&gt;</div><div class="line">	&lt;HTML:STYLE&gt;</div><div class="line">		&lt;!--CSS--&gt;</div><div class="line">	&lt;/HTML:STYLE&gt;</div><div class="line">	&lt;!--XML子元素--&gt;</div><div class="line">&lt;/根源素&gt;</div></pre></td></tr></table></figure></p>
<p>CSS中的注释:<code>/*注释内容*/</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在XML里用到过的CSS的一点点基础内容&lt;br&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
      <category term="CSS" scheme="http://www.codingbalian.online/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema</title>
    <link href="http://www.codingbalian.online/2016/12/21/XML-Schema/"/>
    <id>http://www.codingbalian.online/2016/12/21/XML-Schema/</id>
    <published>2016-12-21T10:58:19.000Z</published>
    <updated>2016-12-24T06:07:58.863Z</updated>
    
    <content type="html"><![CDATA[<p>XML Schema为详细规定XML文档数据类型与组织结构的标准，且基于XML语法，更加规范。</p>
<blockquote>
<p>本篇介绍W3C标准</p>
</blockquote>
<a id="more"></a>
<p></p><h2 id="1">Schema格式</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:schema xmlns:xsd=”http://www.w3.org/2001/XMLSchema”&gt;</div><div class="line">    &lt;xsd:element name=&quot;name&quot;&gt;</div><div class="line">        &lt;xsd:complexType&gt;</div><div class="line">            &lt;xsd:sequence&gt;</div><div class="line">                &lt;xsd:element name=&quot;example&quot; type=&quot;xsd:string&quot;/&gt;</div><div class="line">            &lt;/xsd:sequence&gt;</div><div class="line">        &lt;/xsd:complexType&gt;</div><div class="line">    &lt;/xsd:element&gt;</div><div class="line">&lt;/xsd:schema&gt;</div></pre></td></tr></table></figure><p></p>
<p>schema以<code>&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</code>开头<code>&lt;/xsd:schema&gt;</code>结尾</p>
<p>complexTypey用来定义复杂类型（包含子元素或者带有属性）<br>type定义数据类型，包括string,int,double,dateTime,Boolean,long,integer,float等<br>sequence规定元素需要依次出现</p>
<p></p><h2 id="2">元素声明</h2><br>schema必须且只能声明一个schema以根元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</div><div class="line">...</div><div class="line">...</div><div class="line">&lt;/xsd:schema&gt;</div></pre></td></tr></table></figure><p></p>
<p>element声明元素</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>规定该元素的唯一的ID</td>
</tr>
<tr>
<td>name</td>
<td>规定元素的名称。父元素是schema则必须含name</td>
</tr>
<tr>
<td>ref</td>
<td>对另一个元素的引用</td>
</tr>
<tr>
<td>type</td>
<td>规定内建数据类型的名称，或者规定 simpleType 或 complexType 元素的名称。</td>
</tr>
<tr>
<td>substitutionGroup</td>
<td>规定可用来替代该元素的元素的名称。 该元素必须具有相同的类型或从指定元素类型派生的类型。</td>
</tr>
<tr>
<td>default</td>
<td>为元素规定默认值（仅当元素内容是简单类型或 textOnly ）。</td>
</tr>
<tr>
<td>fixed</td>
<td>为元素规定固定值（仅当元素内容是简单类型或 textOnly ）</td>
</tr>
<tr>
<td>form</td>
<td>该元素的形式。</td>
</tr>
<tr>
<td>maxOccurs</td>
<td>在父元素中可出现的最大次数。不设限制：”unbounded”</td>
</tr>
<tr>
<td>minOccurs</td>
<td>在父元素中可出现的最小次数。</td>
</tr>
<tr>
<td>nillable</td>
<td>是否可以将显式的零值分配给该元素。此项应用于元素内容并且不是该元素的属性。 默认值为 false。</td>
</tr>
<tr>
<td>abstract</td>
<td>元素是否可以在实例文档中使用。true不能出现在文档中。</td>
</tr>
<tr>
<td>block</td>
<td>派生的类型。防止具有指定派生类型的元素被用于替代该元素。</td>
</tr>
<tr>
<td>final</td>
<td>设置 element 元素上 final 属性的默认值。</td>
</tr>
</tbody>
</table>
<p>block参数：<br>extension - 防止通过扩展派生的元素被用来替代该元素。<br>restriction - 防止通过限制派生的元素被用来替代该元素。<br>substitution - 防止通过替换派生的元素被用来替代该元素。<br>#all - 防止所有派生的元素被用来替代该元素。</p>
<p>final参数：<br>extension - 防止通过扩展派生的元素被用来替代该元素<br>restriction - 防止通过限制派生的元素被用来替代该元素<br>#all - 防止所有派生的元素被用来替代该元素</p>
<p>element常用子元素</p>
<table>
<thead>
<tr>
<th>元素名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>annotation</td>
<td>定义批注</td>
</tr>
<tr>
<td>simpleType</td>
<td>简单类型</td>
</tr>
<tr>
<td>complexType</td>
<td>复杂类型</td>
</tr>
<tr>
<td>key</td>
<td>属性或元素必须是指定的键</td>
</tr>
<tr>
<td>unique</td>
<td>属性或元素在指定范围内唯一</td>
</tr>
<tr>
<td>keyref</td>
<td>指定的元素或属性与指定的key/unique相对应</td>
</tr>
</tbody>
</table>
<p>空元素定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:element name=&quot;name&quot;&gt;</div><div class="line">  &lt;xsd:complexType&gt;</div><div class="line">    &lt;xsd:complexContent&gt;</div><div class="line">      &lt;xsd:restriction base=&quot;xs:integer&quot;&gt;</div><div class="line">        &lt;xsd:attribute name=&quot;attribute&quot; type=&quot;xsd:string&quot;/&gt;</div><div class="line">      &lt;/xsd:restriction&gt;</div><div class="line">    &lt;/xsd:complexContent&gt;</div><div class="line">  &lt;/xsd:complexType&gt;</div><div class="line">&lt;/xsd:element&gt;</div></pre></td></tr></table></figure></p>
<p>对应的XML元素定义<code>&lt;name attribute=&quot;string&quot;/&gt;</code></p>
<p>默认值<br><code>&lt;xsd:element name=&quot;author&quot; type=&quot;xsd:string&quot; default=&quot;cheng&quot;&gt;</code></p>
<p>固定值<br><code>&lt;xsd:element name=&quot;author&quot; type=&quot;xsd:integar&quot; fixed=&quot;20&quot;&gt;</code></p>
<p>元素引用<code>&lt;xsd:element name=&quot;&quot; ref=&quot;&quot;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">person.xsd</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</div><div class="line">	&lt;xsd:element name=&quot;person&quot;&gt;</div><div class="line">		&lt;xsd:complexType&gt;</div><div class="line">            &lt;xsd:sequence&gt;</div><div class="line">                &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;</div><div class="line">				&lt;xsd:element ref=&quot;phone&quot;/&gt;</div><div class="line">            &lt;/xsd:sequence&gt;</div><div class="line">        &lt;/xsd:complexType&gt;</div><div class="line">    &lt;/xsd:element&gt;</div><div class="line">	&lt;xsd:element name=&quot;phone&quot;&gt;</div><div class="line">		&lt;xsd:complexType&gt;</div><div class="line">            &lt;xsd:sequence&gt;</div><div class="line">                &lt;xsd:element name=&quot;number&quot; type=&quot;xsd:string&quot;/&gt;</div><div class="line">            &lt;/xsd:sequence&gt;</div><div class="line">        &lt;/xsd:complexType&gt;</div><div class="line">    &lt;/xsd:element&gt;</div><div class="line">&lt;/xsd:schema&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">XML</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;person xmlns:xsi&quot;http://www.w3.org/2001/XMLSchema&quot; xsi:noNamespaceSchemaLocation=&quot;person.xsd&quot;&gt;</div><div class="line">	&lt;name&gt;Cheng&lt;/name&gt;</div><div class="line">	&lt;phone&gt;</div><div class="line">		&lt;number&gt;123456&lt;/number&gt;</div><div class="line">	&lt;/phone&gt;</div><div class="line">&lt;/person&gt;</div></pre></td></tr></table></figure>
<p>元素替换<br><code>&lt;xs:element name=&quot;&quot; substitutionGroup=&quot;name&quot;/&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</div><div class="line">	&lt;xsd:element name=&quot;person&quot;&gt;</div><div class="line">		&lt;xsd:complexType&gt;</div><div class="line">            &lt;xsd:sequence&gt;</div><div class="line">                &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;</div><div class="line">				&lt;xsd:element ref=&quot;phone&quot;/&gt;</div><div class="line">            &lt;/xsd:sequence&gt;</div><div class="line">        &lt;/xsd:complexType&gt;</div><div class="line">    &lt;/xsd:element&gt;</div><div class="line">	&lt;xsd:element name=&quot;phone&quot;&gt;</div><div class="line">    &lt;xsd:element name=&quot;number&quot; type=&quot;xsd:string&quot; substitutionGroup=&quot;phone&quot;/&gt;</div><div class="line">&lt;/xsd:schema&gt;</div></pre></td></tr></table></figure>
<p></p><h2 id="3">数据类型</h2><br>内置数据类型<br><code>&lt;xsd:element name=&quot;&quot; type=&quot;&quot;&gt;</code><p></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>true/false</td>
</tr>
<tr>
<td>date</td>
<td>日期 YYYY-MM-DD</td>
</tr>
<tr>
<td>dateTime</td>
<td>YYYY-MM-DD hh:mm:ss</td>
</tr>
<tr>
<td>time</td>
<td>hh:mm:ss</td>
</tr>
<tr>
<td>decimal</td>
<td>任意精度和位数的十进制数</td>
</tr>
<tr>
<td>integer</td>
<td>整数</td>
</tr>
<tr>
<td>uri-refernce</td>
<td>URL</td>
</tr>
<tr>
<td>float</td>
<td>浮点数</td>
</tr>
</tbody>
</table>
<p>简单自定义类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:element name=&quot;&quot; type=&quot;自定义简单类型名&quot;&gt;</div><div class="line">&lt;xsd:simpleType name=&quot;自定义简单类型名称&quot;&gt;</div><div class="line">&lt;xsd:restriction base=&quot;现有类型名称&quot;&gt;</div><div class="line">&lt;!--内容--&gt;</div><div class="line">&lt;/xsd:restriction&gt;</div><div class="line">&lt;/xsd:simpleType&gt;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>base常用约束面</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>enumeration</td>
<td>定义可接受值的列表</td>
</tr>
<tr>
<td>length</td>
<td>允许字符或列表的精确数目</td>
</tr>
<tr>
<td>maxLength</td>
<td>允许字符或列表的最大数目</td>
</tr>
<tr>
<td>minLength</td>
<td>允许字符或列表的最小数目</td>
</tr>
<tr>
<td>pattern</td>
<td>可接受字符的精确序列</td>
</tr>
<tr>
<td>whiteSpace</td>
<td>空白字符的处理方式</td>
</tr>
<tr>
<td>totalDigits</td>
<td>定义所允许的阿拉伯数字的精确位数</td>
</tr>
<tr>
<td>fractionDigits</td>
<td>定义所允许的最大的小数位数</td>
</tr>
<tr>
<td>maxExclusive</td>
<td>定义数值的上限(小于)</td>
</tr>
<tr>
<td>maxInclusive</td>
<td>定义数值的上限(小于等于)</td>
</tr>
<tr>
<td>minExclusive</td>
<td>定义数值的下限(大于)</td>
</tr>
<tr>
<td>minInclusive</td>
<td>定义数值的下限(大于等于)</td>
</tr>
</tbody>
</table>
<p>复杂数据类型(complexType)</p>
<ul>
<li>简单内容元素(simpleContent)仅包含文本属性不包含子元素<br>声明：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:element name=&quot;&quot; type=&quot;&quot;&gt;</div><div class="line">&lt;xsd:complexType name=&quot;类型名&quot;&gt;</div><div class="line">	&lt;xsd:simpleContent&gt;</div><div class="line">		&lt;xsd:extension base=&quot;简单类型&quot;&gt;</div><div class="line">			&lt;xsd:attribute name=&quot;&quot; type=&quot;&quot;/&gt;		</div><div class="line">		&lt;/xsd:extension&gt;	</div><div class="line">	&lt;/xsd:simpleContent&gt;</div><div class="line">&lt;/xsd:complexType&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>属性声明格式<code>&lt;xsd:attribute name=&quot;&quot; type=&quot;&quot; use=&quot;&quot;/&gt;</code><br>use指定出现与否<code>optional</code>可出现可不出现，<code>required</code>必须出现,<code>prohibited</code>不能出现<br>default设定默认值，fixed指定固定值</p>
<ul>
<li>复杂内容元素complexContent包含子元素<br>声明：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:element name=&quot;&quot; type=&quot;&quot;&gt;</div><div class="line">&lt;xsd:complexType name=&quot;&quot;&gt;</div><div class="line">	&lt;xsd:complexContent&gt;</div><div class="line">		&lt;xsd:restriction base=&quot;xsd:andType&quot;&gt;</div><div class="line">			&lt;!--子元素声明--&gt;</div><div class="line">			&lt;!--属性声明--&gt;</div><div class="line">		&lt;/xsd:restriction&gt;</div><div class="line">	&lt;/xsd:complexContent&gt;</div><div class="line">&lt;/xsd:complexType&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>complexType通常包含多个子元素，使用<code>all</code>、<code>sequence</code>、<code>choice</code>、<code>group</code>四种结构指示元素顺序</p>
<ol>
<li><p>all：所有成员可以出现一次或者不出现，排序任意,位于顶层不能嵌套</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;all maxOccurs=&quot;0|1&quot; minOccurs=&quot;0|1&quot;&gt;</div><div class="line">	&lt;!--声明--&gt;</div><div class="line">&lt;/all&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>sequence:按顺序出现，默认出现1次，可由maxOccurs和minOccurs控制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:sequence&gt;</div><div class="line">	&lt;!--声明--&gt;</div><div class="line">&lt;/xsd:sequence&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>choice:选择一个元素出现，能与sequence嵌套</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:choice minOccurs=&quot;&quot; maxOccurs=&quot;&quot;&gt;</div><div class="line">&lt;!--声明--&gt;</div><div class="line">&lt;/xsd:choice&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>group:归为一组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;xsd:group minOccurs=&quot;&quot; maxOccurs=&quot;&quot; name=&quot;&quot; ref=&quot;组名&quot;&gt;</div><div class="line">&lt;!--声明--&gt;</div><div class="line">&lt;/xsd:group&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p></p><h2 id="4">命名空间</h2><p></p>
<p><xsd: schema="" targetnamespace="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns=""></xsd:></p>
<ul>
<li>targetNamespace目标命名空间，schema规定在其中有效</li>
<li>标准命名空间：<a href="http://www.w3.org/2001/XMLSchema" target="_blank" rel="external">http://www.w3.org/2001/XMLSchema</a> </li>
<li>默认命名空间：自定义文件的地址</li>
</ul>
<p>引用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#已定义目标命名空间</div><div class="line">&lt;根源素名 xmlns=&quot;www.studaholic.online/xml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema&quot; </div><div class="line">xsi:schemaLocation=&quot;www.studaholic.online/xml/文档名.xsd&quot;</div><div class="line">/&gt;</div><div class="line">#未定义目标命名空间</div><div class="line">&lt;根源素名 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema&quot; </div><div class="line">xsi:noNamespaceSchemaLocation=&quot;文档名.xsd&quot; 属性名=&quot;&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XML Schema为详细规定XML文档数据类型与组织结构的标准，且基于XML语法，更加规范。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇介绍W3C标准&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
      <category term="Schema" scheme="http://www.codingbalian.online/tags/Schema/"/>
    
  </entry>
  
  <entry>
    <title>XML:DTD</title>
    <link href="http://www.codingbalian.online/2016/12/20/XML-DTD/"/>
    <id>http://www.codingbalian.online/2016/12/20/XML-DTD/</id>
    <published>2016-12-20T13:24:43.000Z</published>
    <updated>2016-12-24T06:08:12.303Z</updated>
    
    <content type="html"><![CDATA[<p>XML文档类型定义DTD(Document Type Definition)要求XML文件遵守规定的语法。<br><a id="more"></a></p>
<h2 id="1">DTD作用</h2><br>1. 指定文档结构的规则<br>2. 验证文档有效性<br>3. 可以被共享<br>4. 可以在描述的文档中与外部的URL链接<br><br><h2 id="2">DTD结构</h2><br>1. <code>&lt;!DOCTYPE</code>开头<code>]&gt;</code>结尾<br>2. <code>&lt;!ELEMENT&gt;</code>声明元素<br>3. <code>&lt;!ATTLIST&gt;</code> 声明元素属性<br>4. <code>&lt;!ENTITY&gt;</code>声明实体，可以用来存储常用的文字区块，或将非XML的数据包括在文档中<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;</div><div class="line">&lt;!--DTD定义--&gt;</div><div class="line">&lt;!DOCTYPE 公司[</div><div class="line">&lt;!--元素定义--&gt;</div><div class="line">&lt;!ELEMENT 公司 (雇员)+&gt;</div><div class="line">&lt;!ELEMENT 雇员 (姓名,雇佣日期,项目清单,说明)&gt;</div><div class="line">&lt;!ELEMENT 姓名 (#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT 雇佣日期 (#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT 项目清单 (项目)*&gt;</div><div class="line">&lt;!ELEMENT 项目 (产品,价格)&gt;</div><div class="line">&lt;!ELEMENT 产品 (#PCDATA)&gt;</div><div class="line">&lt;!ELEMENT 价格 (#PCDATA)&gt;</div><div class="line">&lt;!--属性定义--&gt;</div><div class="line">&lt;!ATTLIST 项目清单 数量 CDATA #REQUIRED&gt;</div><div class="line">&lt;!ATTLIST 雇员</div><div class="line">    部门 CDATA #IMPLIED</div><div class="line">    全职 CDATA #IMPLIED</div><div class="line">&gt;</div><div class="line">&lt;!ENTITY  note  &quot;这里是备注信息&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;!--内容定义--&gt;</div><div class="line">&lt;公司&gt;</div><div class="line">    &lt;雇员 部门=&quot;市场部&quot; 全职=&quot;是&quot;&gt;</div><div class="line">        &lt;姓名&gt;李东&lt;/姓名&gt;</div><div class="line">        &lt;雇佣日期&gt;2005-01-15&lt;/雇佣日期&gt;</div><div class="line">        &lt;项目清单 数量=&quot;2&quot;&gt;</div><div class="line">            &lt;项目&gt;</div><div class="line">                &lt;产品&gt;打印机&lt;/产品&gt;</div><div class="line">                &lt;价格&gt; $111.00=&quot;&quot;&gt;&lt;/价格&gt;</div><div class="line">            &lt;/项目&gt;</div><div class="line">            &lt;项目&gt;</div><div class="line">                &lt;产品&gt;笔记本&lt;/产品&gt;</div><div class="line">                &lt;价格&gt; $998.00&gt;&lt;/价格&gt;</div><div class="line">            &lt;/项目&gt;</div><div class="line">        &lt;/项目清单&gt;</div><div class="line">        &lt;说明&gt;这里是备注信息&lt;/说明&gt;</div><div class="line">    &lt;/雇员&gt;</div><div class="line">    &lt;雇员 部门=&quot;客服部&quot;&gt;</div><div class="line">        &lt;姓名&gt;王权&lt;/姓名&gt;</div><div class="line">        &lt;雇佣日期&gt;2005-10-2&lt;/雇佣日期&gt;</div><div class="line">        &lt;项目清单 数量=&quot;1&quot;&gt;</div><div class="line">            &lt;项目&gt;</div><div class="line">                &lt;产品&gt;扫描仪&lt;/产品&gt;</div><div class="line">                &lt;价格&gt; $200.00=&quot;&quot;&gt;&lt;/价格&gt;</div><div class="line">            &lt;/项目&gt;</div><div class="line">        &lt;/项目清单&gt;</div><div class="line">        &lt;说明&gt;这里是备注信息&lt;/说明&gt;</div><div class="line">    &lt;/雇员&gt;</div><div class="line"> &lt;/公司&gt;</div></pre></td></tr></table></figure><br><br>在IE中运行显示&lt;!DOCTYPE 公司 (View Source of full doctype……)&gt;说明是内部DTD<br><br><h2 id="3">DTD元素类型</h2><br>1. 空元素<code>&lt;!ELEMENT 元素 EMPTY&gt;</code>对应XML<code>&lt;元素/&gt;</code><br>2. ANY类型<code>&lt;!ELEMENT 元素 ANY&gt;</code>表明元素可以包含定义的其他任意内容或任意内容的组合<br>3. #PCDATA(可解析文本)，不能再包含子元素<br>4. 子元素<code>&lt;!ELEMENT 元素 (子元素列表)&gt;</code>包括序列与选择两种结构<code>&lt;!ELEMENT 元素 (元素1,元素2)&gt;</code>表示顺序，<code>&lt;!ELEMENT 元素 (元素1|元素2)&gt;</code>表示选择，至少选其一<br>5. 混合类型<code>&lt;!ELEMENT 元素 (#PCDATA|子元素1|子元素2)*&gt;</code><br><br><h2 id="4">元素限定符</h2>

<table>
<thead>
<tr>
<th>符号</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>()</td>
<td style="text-align:center">分组</td>
</tr>
<tr>
<td>&brvbar;</td>
<td style="text-align:center">选择</td>
</tr>
<tr>
<td>+</td>
<td style="text-align:center">最少出现一次</td>
</tr>
<tr>
<td>*</td>
<td style="text-align:center">允许出现任意多次</td>
</tr>
<tr>
<td>?</td>
<td style="text-align:center">出现0~1次</td>
</tr>
<tr>
<td>,</td>
<td style="text-align:center">必须按指定顺序出现</td>
</tr>
</tbody>
</table>
<p>**DTD属性</p>
<ul>
<li>设定元素属性与名称</li>
<li>设定属性数据类型</li>
<li>设定是否可选，是否属性固定，以及默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ATTLIST ELEMENT_name</div><div class="line">    Attribute_name TYPE [add_declare]&gt;</div></pre></td></tr></table></figure>
<p>属性类型</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CDATA</td>
<td style="text-align:center">值为普通的字符</td>
</tr>
<tr>
<td>ID</td>
<td style="text-align:center">值在文档中是唯一的</td>
</tr>
<tr>
<td>IDREF</td>
<td style="text-align:center">值参考了文档中另一个ID属性</td>
</tr>
<tr>
<td>IDREFS</td>
<td style="text-align:center">值参考了用空格隔开的多个文档中的ID属性</td>
</tr>
<tr>
<td>ENTITY</td>
<td style="text-align:center">值是一个外部实体</td>
</tr>
<tr>
<td>ENTITIES</td>
<td style="text-align:center">值包含了多个外部实体，用空格隔开</td>
</tr>
<tr>
<td>NMTOKEN</td>
<td style="text-align:center">值只能由字母、数字、下划线、连字符、圆点、冒号等字符组成</td>
</tr>
<tr>
<td>NMTOKENS</td>
<td style="text-align:center">值由多个nmtoken组成，用空格隔开</td>
</tr>
<tr>
<td>NOTATION</td>
<td style="text-align:center">值是在DTD中声明过的注解名称</td>
</tr>
<tr>
<td>Enumerated</td>
<td style="text-align:center">列出能够赋予该属性的各种值的列表，只能从中选定一个属性值</td>
</tr>
</tbody>
</table>
<p>在DTD中声明一个NOTATION类型的属性时，必须首先声明一个具体的NOTATION用来指向应用软件所在的位置，声明的方式有两种:<br>一种是使用MIME类型，格式为：<br><code>&lt;!NOTATION 记号名 SYSTEM &quot;MIME类型&quot;&gt;</code><br>另一种是使用URL路径，指定一个处理程序的路径，格式为：<br><code>&lt;!NOTATION 记号名 SYSTEM  &quot;URL&quot;&gt;</code></p>
<p>属性的附加声明<br>added_declare是属性定义中的可选内容。附加声明指明了该属性是必要的还是可选的，是预设的固定属性值还是当属性值被省略时的默认值</p>
<table>
<thead>
<tr>
<th>附加声明</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>#REQUIRED</td>
<td>必须给出属性值</td>
</tr>
<tr>
<td>#IMPLIIED</td>
<td>可以不出现</td>
</tr>
<tr>
<td>#FIXED AttValue</td>
<td>固定值</td>
</tr>
<tr>
<td>Default_Value</td>
<td>默认</td>
</tr>
</tbody>
</table>
<h2 id="5">DTD引用</h2>

<p>内部DTD</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 公司[</div><div class="line">	声明语句</div><div class="line">]&gt;</div></pre></td></tr></table></figure>
<p>外部DTD</p>
<p>引用私有DTD：<br><code>&lt;!DOCTYPE  RootElementName  SYSTEM  DTD_URL&gt;</code><br>引用公有DTD：<br><code>&lt;!DOCTYPE RootElementName PUBLIC DTD_name  DTD_URL&gt;</code></p>
<ul>
<li>RootElementName根源素</li>
<li>SYSTEM 私有</li>
<li>PUBLIC 公用</li>
<li>DTD_name DTD文件名</li>
<li>DTD_URL DTD文件路径</li>
</ul>
<h2 id="6">DTD实体</h2>

<p>普通实体<br>用来插入文本。<br>内部普通实体<br><code>&lt;!ENTITY Entity_Name Entity_Value&gt;</code><br>外部普通实体<br><code>&lt;!ENTITY Entity_Name SYSTEM Entity_URL&gt;</code><br>SYSTEM是定义外部实体的关键字<br>引用<code>&amp;Enitiy_Name;</code><br>参数实体<br>不仅可以包含文本，还可以包含元素类型声明、属性列表声明、一般实体声明、标签声明、处理指令或注释等，只能在DTD中引用，并且通常情况下只能在外部DTD文档中引用。<br>内部参数实体<br><code>&lt;!ENTITY % Entity_Name Entity_Value&gt;</code><br>外部参数实体<br><code>&lt;!ENTITY % Entity_Name SYSTEM Entity_URL&gt;</code><br>引用<code>&amp;Enitiy_Name;</code><br>不可解析实体<br>二进制文件，如图形、声音等非字符型数据，唯一可以出现不可解析实体的地方就是属性值且不能进行引用<br>链接是XML文档:<br><code>&lt;!ENTITY name SYSTEM &quot;URI&quot;&gt;</code><br>不是XML文档<br><code>&lt;!ENTITY name SYSTEM “URI”NDATA  type&gt;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XML文档类型定义DTD(Document Type Definition)要求XML文件遵守规定的语法。&lt;br&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
      <category term="DTD" scheme="http://www.codingbalian.online/tags/DTD/"/>
    
  </entry>
  
  <entry>
    <title>XML：语法基础</title>
    <link href="http://www.codingbalian.online/2016/12/20/XML/"/>
    <id>http://www.codingbalian.online/2016/12/20/XML/</id>
    <published>2016-12-20T11:10:43.000Z</published>
    <updated>2016-12-24T06:08:29.605Z</updated>
    
    <content type="html"><![CDATA[<p>XML语法基础的介绍实例<br><a id="more"></a></p>
<p></p><h2 id="1">XML声明</h2><br><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot; standalone=&quot;no&quot;?&gt;</code><p></p>
<ul>
<li>version属性规定了XML文档的版本，默认为1.0</li>
<li>encoding属性表示XML文档使用的字符编码，默认为UTF-8</li>
<li>standalone属性定义是否可以在不读取其他文件的情况下处理改文档，默认为no，若没有引用其他文件可以设置为yes</li>
</ul>
<p></p><h2 id="2">XML注释</h2><br><code>&lt;!--注释--&gt;</code><p></p>
<ul>
<li>注释内不能包含<code>-</code>和<code>--</code>。</li>
<li>不能放在元素标记内。</li>
<li>注释不能嵌套。</li>
<li>元素开始结束标签不能被注释掉。</li>
</ul>
<p></p><h2 id="3">XML元素</h2><br><code>&lt;标记名&gt;内容&lt;/标记名&gt;</code><p></p>
<ul>
<li>标记名为元素名称。</li>
<li>名称不能以数字可标点开头。</li>
<li>不能以XML开头。</li>
<li>名称不能包含空格。</li>
<li>不要使用”:”</li>
<li>空元素:<code>&lt;title&gt;&lt;/title&gt;</code>或<code>&lt;title/&gt;</code></li>
<li>空元素也可以携带属性：<code>&lt;书籍 作者=&quot;作者&quot; /&gt;</code></li>
</ul>
<p></p><h2 id="4">XML属性</h2><br><code>&lt;标记名 属性1=&quot;属性&quot; 属性2=&quot;属性&quot;&gt;内容&lt;/标记名&gt;</code><br><code>&lt;空标记 属性=&quot;属性&quot;/&gt;</code><p></p>
<ul>
<li>CSS来显示XML的时候不会显示属性。</li>
<li>属性值中有<code>&#39;&#39;</code>时需要用<code>&quot;&quot;</code>括起来，反之亦然。</li>
<li>属性值不能包含<code>&lt;&gt;&amp;</code>等。</li>
</ul>
<p></p><h2 id="5">CDATA</h2><br>包括的内容都当做纯文本解析，为<code>&lt;&gt;&amp;</code>等符号设计。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;![CDATA[</div><div class="line">	内容</div><div class="line">]]&gt;</div></pre></td></tr></table></figure><p></p>
<ul>
<li>不能嵌套。</li>
<li><code>]]&gt;</code>前不能有空格。</li>
<li>必须在元素内容内。</li>
</ul>
<p></p><h2 id="6">XML命名空间</h2><br><code>&lt;标记名 xmlns: 标识符=&quot;URI&quot;&gt;</code> <p></p>
<ul>
<li>标识符唯一。</li>
<li>URI在Web上归属于URL或URN。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;DocumentElement xmlns:books=&quot;http:www.aa.com&quot; xmlns:person=&quot;http:www.cc.com&quot;&gt;</div><div class="line">&lt;book&gt;</div><div class="line">&lt;books:NAME&gt;耶路撒冷三千年&lt;/books:NAME&gt;</div><div class="line">&lt;person:NAME&gt;贝里昂&lt;/person:NAME&gt;</div><div class="line">&lt;price&gt;20&lt;/price&gt;</div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/DocumentElement&gt;</div></pre></td></tr></table></figure>
<ul>
<li>DocumentElement定义了book和person的标识符为命名空间，在文档元素前添加特定的命名空间可以加以区分。</li>
<li>也可在属性中使用命名空间。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;DocumentElement xmlns:books=&quot;http:www.aa.com&quot; xmlns:person=&quot;http:www.cc.com&quot;&gt;</div><div class="line">&lt;book books:NAME&gt;耶路撒冷三千年</div><div class="line">&lt;person:NAME&gt;贝里昂&lt;/person:NAME&gt;</div><div class="line">&lt;price&gt;20&lt;/price&gt;</div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/DocumentElement&gt;</div></pre></td></tr></table></figure>
<ul>
<li>默认命名空间<code>&lt;标记名 xmlns=&quot;URI&quot;&gt;</code> 指定后所有未标识命名空间的元素都归属于默认命名空间。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</div><div class="line">&lt;DocumentElement xmlns=&quot;http:www.aa.com&quot; xmlns:person=&quot;http:www.cc.com&quot;&gt;</div><div class="line">&lt;book&gt;</div><div class="line">&lt;NAME&gt;耶路撒冷三千年&lt;/NAME&gt;</div><div class="line">&lt;person:NAME&gt;贝里昂&lt;/person:NAME&gt;</div><div class="line">&lt;price&gt;20&lt;/price&gt;</div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/DocumentElement&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p></p><h2 id="7">空白字符</h2><br><code>&lt;DocumentElement xml:space=&quot;preserve/default&quot;&gt;</code><p></p>
<ul>
<li>默认不处理无意空白字符，使用<code>xml:space=&quot;preserve</code>可以保留空白字符。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XML语法基础的介绍实例&lt;br&gt;
    
    </summary>
    
      <category term="XML" scheme="http://www.codingbalian.online/categories/XML/"/>
    
    
  </entry>
  
  <entry>
    <title>Github教程</title>
    <link href="http://www.codingbalian.online/2016/12/20/Github-Tutorial/"/>
    <id>http://www.codingbalian.online/2016/12/20/Github-Tutorial/</id>
    <published>2016-12-20T03:17:56.000Z</published>
    <updated>2016-12-24T06:08:34.307Z</updated>
    
    <content type="html"><![CDATA[<p>Github 部分功能使用教程<br><a id="more"></a><br>上传：<br>在GitHub上创建仓库<br>使用Git Bush进入本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">touch README</div><div class="line">git add .</div><div class="line">git commit -m &apos;first commit&apos;</div><div class="line">git remote add origin git@github.com:yourname/yourrepositoryname.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>上传至master分支<br>在本地新建分支： <code>git branch Branch</code><br>切换分支: <code>git checkout Branch</code><br>将新分支发布： <code>git push origin Branch</code><br>在本地删除分支： <code>git branch -d Branch</code><br>在github远程端删除分支： <code>git push origin :Branch</code><br>取回仓库并与本地合并<code>git pull origin</code><br>克隆仓库<code>git clone https://github.com/BalianCheng/BalianCheng.github.io.git</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github 部分功能使用教程&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="http://www.codingbalian.online/categories/github/"/>
    
    
  </entry>
  
  <entry>
    <title>Adaboost</title>
    <link href="http://www.codingbalian.online/2016/12/20/Adaboost/"/>
    <id>http://www.codingbalian.online/2016/12/20/Adaboost/</id>
    <published>2016-12-19T16:35:57.000Z</published>
    <updated>2016-12-24T06:08:39.660Z</updated>
    
    <content type="html"><![CDATA[<p>Adaboost是一种迭代算法，其核心思想是针对同一个训练集训练不同的分类器(弱分类器)，然后把这些弱分类器集合起来，构成一个更强的最终分类器（强分类器）。<br><a id="more"></a></p>
<h2 id="1">Adaboost过程</h2><br>1. 先通过对N个训练样本的学习得到第一个弱分类器；<br>2. 将分错的样本和其他的新数据一起构成一个新的N个的训练样本，通过对这个样本的学习得到第二个弱分类器 ；<br>3. 将1和2都分错了的样本加上其他的新样本构成另一个新的N个的训练样本，通过对这个样本的学习得到第三个弱分类器；<br>4. 最终经过提升的强分类器。即某个数据被分为哪一类要由各分类器权值决定。<br>训练数据中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练当中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值alpha，这些alpha值是基于每个弱分类器的错误率进行计算的。<br>错误率ε的定义为<br>$$ε=\frac{未正确分类的样本数}{所有样本数}$$<br>alpha：<br>$$α=\frac{1}{2}ln\frac{1-ε}{ε}$$<br><img src="http://i1.piimg.com/567571/f46e6188192028b6.png" alt=""><br>AdaBoost算法的示意图。左边是数据集，其中直方图的不同宽度表示每个样例上的不同权重。在经过一个分类器之后，加权的预测结果会通过三角形中的alpha值进行加权。每个三角形中输出的加权结果在圆形中求和，从而得到最终的输出结果计算出alpha值之后，可以对权重向量D进行更新，以使得那些正确分类的样本的权重降低而错分样本的权重升高。<br>D的计算方法如下:<br>如果某个样本被正确分类，那么该样本的权重更改为：<br>$$D_i^{(t+1)}=\frac{D_i^{(t)}e^-α}{Sum(D)}$$<br>而如果某个样本被错分，那么该样本的权重更改为：<br>$$D_i^{(t+1)}=\frac{D_i^{(t)}e^α}{Sum(D)}$$<br>在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。<br><br><h2 id="2">自适应数据加载函数</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def loadDataSet(filename):  </div><div class="line">    numFeat = len(open(filename).readline().split(&apos;\t&apos;))  </div><div class="line">    dataMat = []  </div><div class="line">    labelMat=[]  </div><div class="line">    fr = open(filename)  </div><div class="line">    for line in fr.readlines():  </div><div class="line">        lineArr= []  </div><div class="line">        curLine = line.strip(&apos;\n&apos;).split(&apos;\t&apos;)  </div><div class="line">        for i in range(numFeat - 1):  </div><div class="line">            lineArr.append(float(curLine[i]))  </div><div class="line">        dataMat.append(lineArr)  </div><div class="line">        labelMat.append(float(curLine[-1]))  </div><div class="line">    fr.close()  </div><div class="line">    return dataMat, labelMat</div></pre></td></tr></table></figure><br><br> * 并不指定每个文件中的特征数目，可以自动检测，并假定最后一个特征是类别标签<br><br><h2 id="3">单层决策树生成函数</h2>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">def stumpClassify(dataMatrix, dimen, threshVal, threshIneq):  </div><div class="line">    retArray = ones((shape(dataMatrix)[0],1))  </div><div class="line">    if threshIneq == &apos;lt&apos;:  </div><div class="line">        retArray[dataMatrix[:,dimen]&lt;threshVal] = -1.0  </div><div class="line">    else:  </div><div class="line">        retArray[dataMatrix[:,dimen]&lt;threshVal] = -1.0  </div><div class="line">    return retArray  </div><div class="line"></div><div class="line">def buildStump(dataArr, classLabels, D):  </div><div class="line">    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T  </div><div class="line">    m,n = shape(dataMatrix)  </div><div class="line">    numSteps = 10.0; bestStump = &#123;&#125;; #定义一个空字典，用于存储给定权重向量D时所得到的最佳单层决策树的相关信息  </div><div class="line">	bestClassEst = mat(zeros((m,1)))  </div><div class="line">    minError = inf  #最小错误率初始化为无穷大</div><div class="line">    for i in range(n):  #在所有数据集的所有特征上遍历  </div><div class="line">        rangeMin = dataMatrix[:,i].min(); rangeMax = dataMatrix[:,i].max();  </div><div class="line">        stepSize = (rangeMax - rangeMin)/numSteps #通过计算特征的最小值和最大值来计算步长，numSteps越大，步长越小   </div><div class="line">        for j in range(-1, int(numSteps)+1):  #按分的步长总数进行循环</div><div class="line">            for inequal in [&apos;lt&apos;,&apos;gt&apos;]:  </div><div class="line">                threshVal = (rangeMin + float(j)*stepSize)  </div><div class="line">                predictedVals = stumpClassify(dataMatrix, i, threshVal, inequal)  </div><div class="line">                errArr = mat(ones((m,1)))   #构建错误数组  errArr，如果predict-edVals中的值不等于labelMat中的真正类别标签值，那么errArr的相应位置为1</div><div class="line">                errArr[predictedVals == labelMat] = 0  </div><div class="line">                weightedError = D.T * errArr           #这里的error是错误向量errArr和权重向量D的相应元素相乘得到的即加权错误率  </div><div class="line">                #print &quot;split: dim %d, thresh %.2f, thresh inequal: %s, the weighted error is %.3f&quot; %(i, threshVal, inequal, weightedError)  </div><div class="line">                if weightedError &lt; minError:  </div><div class="line">                    minError = weightedError  </div><div class="line">                    bestClassEst = predictedVals.copy()  </div><div class="line">                    bestStump[&apos;dim&apos;] = i  </div><div class="line">                    bestStump[&apos;thresh&apos;] = threshVal  </div><div class="line">                    bestStump[&apos;ineq&apos;] = inequal  </div><div class="line">    return bestStump, minError, bestClassEst #返回分类的最小错误率</div></pre></td></tr></table></figure>
<ul>
<li>stumpClassify()通过阈值比较进行分类，可以通过数组过滤实现，首先将返回的元素全部设置为1，不满足等式的元素设置为为-1。</li>
<li>buildStump()有三层循环构建了单层决策树，最外层循环为遍历特征，次外层循环为遍历的步长，最内层为是否大于或小于阀值。构建的最小错误率为加权错误率，这就是为什么增加分错样本的权重，因为分错样本的权重增加了，下次如果继续分错，加权错误率会很大，这就不满足算法最小化加权错误率了。此外，加权错误率在每次迭代过程中一定是逐次降低的。</li>
<li>单层决策树的生成函数是决策树的一个简化版本。它就是所谓的弱学习器，即弱分类算法。</li>
</ul>
<p></p><h2 id="4">基于单层决策树的adaboost训练过程</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">def adaBoostTrainDS(dataArr, classLabels, numIt = 40):  </div><div class="line">    weakClassArr = []  #建立一个单层决策树数组</div><div class="line">    m = shape(dataArr)[0]  #得到数据点的数目</div><div class="line">    D = mat(ones((m,1))/m) #向量D非常重要，它包含了每个数据点的权重 </div><div class="line">    aggClassEst = mat(zeros((m,1)))#列向量aggClassEst，记录每个数据点的类别估计累计值  </div><div class="line">    for i in range(numIt):  </div><div class="line">        bestStump, error, classEst = buildStump(dataArr, classLabels, D)  #bestStump=字典,error=分类错误率,classEst=列向量，预测之后的分类列表</div><div class="line">       # print &quot;D:&quot;, D.T  </div><div class="line">        alpha = float(0.5 * log((1.0 - error)/max(error, 1e-16)))   #确保在没有错误时不会发生除零溢出  </div><div class="line">        bestStump[&apos;alpha&apos;] = alpha  </div><div class="line">        weakClassArr.append(bestStump)  </div><div class="line">        #print &quot;classEst:&quot;, classEst.T  </div><div class="line">        expon = multiply(-1 * alpha * mat(classLabels).T, classEst)    #乘法用于区分是否正确或者错误样本,样本被正确分类的话expon为负，错误分类的话为正,其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高  </div><div class="line">        D = multiply(D, exp(expon))  #计算新权重向量D  </div><div class="line">        D = D/D.sum()            # 归一化用的  </div><div class="line">        aggClassEst += alpha * classEst    #累加变成强分类器  </div><div class="line">        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T, ones((m,1)))  </div><div class="line">        errorRate = aggErrors.sum()/m  </div><div class="line">        print &quot;total error: &quot;, errorRate, &quot;\n&quot;  </div><div class="line">        if errorRate == 0.0: break  </div><div class="line">    return weakClassArr, aggClassEst</div></pre></td></tr></table></figure><p></p>
<ul>
<li>对每次迭代：<br>利用buildStump()函数找到最佳的单层决策树<br>将最佳单层决策树加入到单层决策树数组<br>计算alpha<br>计算新的权重向量D<br>更新累计类别估计值<br>如果错误率等于0.0，则退出循环<ul>
<li>我们假定迭代次数设为9，如果算法在第三次迭代之后错误率为0，那么就会退出迭代过程，因此，此时就不需要执行所有的9次迭代过程。每次迭代的中间结果都会通过print语句进行输出。</li>
</ul>
</li>
</ul>
<p></p><h2 id="5">adaboost分类函数</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def adaClassify(datToClass, classifierArr):  </div><div class="line">    dataMatrix = mat(datToClass)  </div><div class="line">    m = shape(dataMatrix)[0]  </div><div class="line">    aggClassEst = mat(zeros((m,1)))  </div><div class="line">    for i in range(len(classifierArr)):  </div><div class="line">        classEst = stumpClassify(dataMatrix, classifierArr[i][&apos;dim&apos;], classifierArr[i][&apos;thresh&apos;], classifierArr[i][&apos;ineq&apos;])  </div><div class="line">        aggClassEst += classifierArr[i][&apos;alpha&apos;]*classEst  </div><div class="line">        print aggClassEst  </div><div class="line">    return sign(aggClassEst)</div></pre></td></tr></table></figure><p></p>
<ul>
<li>adaClassify()函数就是利用训练出的多个弱分类器进行分类的函数。该函数的输入是由一个或者多个待分类样例datToClass以及多个弱分类器组成的数组classifierArr。程序返回aggClassEst的符号，即如果aggClassEst大于0则返回+1，而如果小于0则返回-1。</li>
</ul>
<p></p><h2 id="6">画决策树的图</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">def plot_Fig(xMat,yMat,weakClassArr):  </div><div class="line">    xMat = mat(xMat)  </div><div class="line">    fig = plt.figure()  </div><div class="line">    ax = fig.add_subplot(111)  </div><div class="line">    for i in range(len(yMat)):  </div><div class="line">        if yMat[i] == -1.0: #如果标签为-1，则将数据点标为蓝色方块  </div><div class="line">            ax.scatter(xMat[i,0],xMat[i,1],color=&apos;b&apos;,marker=&apos;s&apos;) #注意flatten的用法  </div><div class="line">        else:  #如果标签为1，则将数据点标为红色圆形  </div><div class="line">            ax.scatter(xMat[i,0],xMat[i,1],color=&apos;r&apos;,marker=&apos;o&apos;)  </div><div class="line">    for i in range(len(weakClassArr)): #根据弱分类器数组画出决策树图形  </div><div class="line">        if weakClassArr[i].get(&quot;dim&quot;) == 0:   </div><div class="line">            y = arange(0.0,3.0,0.1)  </div><div class="line">            x = weakClassArr[i].get(&quot;thresh&quot;) #得到阈值  </div><div class="line">            x = repeat(x,len(y))  </div><div class="line">            ax.plot(x,y)  </div><div class="line">        if weakClassArr[i].get(&quot;dim&quot;) == 1:  </div><div class="line">            x = arange(0.0,3.0,0.1)  </div><div class="line">            y = weakClassArr[i].get(&quot;thresh&quot;)  </div><div class="line">            y = repeat(y,len(x))  </div><div class="line">            ax.plot(x,y)   </div><div class="line">    plt.show()</div></pre></td></tr></table></figure><p></p>
<p></p><h2 id="7">ROC曲线</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">def plotROC(predStrengths, classLabels):  </div><div class="line">    import matplotlib.pyplot as plt  </div><div class="line">    cur = (1.0,1.0) #cursor绘制光标的位置  </div><div class="line">    ySum = 0.0 #variable to calculate AUC；用于计算AUC的值  </div><div class="line">    numPosClas = sum(array(classLabels)==1.0) #计算正例的数目  </div><div class="line">    yStep = 1/float(numPosClas); #确定y坐标轴上的步长，因为当y为1时，对应的正例个数为numPosClas  </div><div class="line">    xStep = 1/float(len(classLabels)-numPosClas) #计算x坐标轴上的步长，因为当x为1时，对应的负例个数为总数减去numPosClas  </div><div class="line">    sortedIndicies = predStrengths.argsort()#get sorted index, it&apos;s reverse  </div><div class="line">    fig = plt.figure()  </div><div class="line">    fig.clf()  </div><div class="line">    ax = plt.subplot(111)  </div><div class="line">    #loop through all the values, drawing a line segment at each point  </div><div class="line">    for index in sortedIndicies.tolist()[0]: #利用tolist()转化为列表，  </div><div class="line">        if classLabels[index] == 1.0: #每得到一个标签为1.0的类，沿着y轴的方向下降一个步长，即不断降低真阳率（好好体会为什么这样做）  </div><div class="line">            delX = 0; delY = yStep;  </div><div class="line">        else:  </div><div class="line">            delX = xStep; delY = 0; #类似   </div><div class="line">            ySum += cur[1] #先对所有矩形的高度进行累加（当y值下降时不累加），最后再乘以xStep就是其总面积。  </div><div class="line">        #draw line from cur to (cur[0]-delX,cur[1]-delY)  </div><div class="line">        ax.plot([cur[0],cur[0]-delX],[cur[1],cur[1]-delY], c=&apos;b&apos;)  </div><div class="line">        cur = (cur[0]-delX,cur[1]-delY) #更新绘制光标的位置  </div><div class="line">    ax.plot([0,1],[0,1],&apos;b--&apos;)  </div><div class="line">    plt.xlabel(&apos;False positive rate&apos;); plt.ylabel(&apos;True positive rate&apos;)  </div><div class="line">    plt.title(&apos;ROC curve for AdaBoost horse colic detection system&apos;)  </div><div class="line">    ax.axis([0,1,0,1])  </div><div class="line">    print &quot;the Area Under the Curve is: &quot;,ySum*xStep  </div><div class="line">    plt.show()</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adaboost是一种迭代算法，其核心思想是针对同一个训练集训练不同的分类器(弱分类器)，然后把这些弱分类器集合起来，构成一个更强的最终分类器（强分类器）。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.codingbalian.online/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>github pages + Hexo + 域名绑定</title>
    <link href="http://www.codingbalian.online/2016/12/19/github-pages-Hexo/"/>
    <id>http://www.codingbalian.online/2016/12/19/github-pages-Hexo/</id>
    <published>2016-12-19T15:03:28.000Z</published>
    <updated>2016-12-24T05:54:41.418Z</updated>
    
    <content type="html"><![CDATA[<p>本文从安装环境开始详细讲述如何使用github pages + Hexo搭建自己的静态博客，并且使用阿里云绑定域名。<br><a id="more"></a></p>
<p></p><h2 id="1">环境</h2><p></p>
<ol>
<li>安装Git<img src="http://oifuxc6w5.bkt.clouddn.com/git.png" alt=""></li>
<li>安装Node<img src="http://oifuxc6w5.bkt.clouddn.com/NODEJS.png" alt=""></li>
<li>验证安装<img src="http://oifuxc6w5.bkt.clouddn.com/cmd.png" alt=""></li>
</ol>
<p></p><h2 id="2">Github Pages</h2><br> 在GitHub创建一个格式为：yourusername.github.io的仓库即可。<br><img src="http://oifuxc6w5.bkt.clouddn.com/gitmaven.png" alt=""><p></p>
<p></p><h2 id="3">Hexo</h2><br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>建立一个blog文件夹用于存放博客文件,然后右键单击选择“Git Bash”。<br><code>npm install hexo-cli -g</code><br><code>hexo init blog</code><br><code>cd blog</code><br><code>npm install</code><br><code>hexo server</code><br>执行hexo server时，默认端口是4000,如果端口被占用更换即可。<br>如<code>hexo server -p 4001</code><br>访问<code>http://localhost:4000/</code><br><img src="http://oifuxc6w5.bkt.clouddn.com/hexo.png" alt=""><p></p>
<p></p><h2 id="4">更换主题</h2><br>exo-theme：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a><br>hexo-github-theme-list：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a><br><code>git clone</code>加上主题地址<br>_config.yml中将theme改成刚刚下载的主题<br>修改完成后<code>hexo generate</code>  <code>hexo server</code>重启服务器查看效果<br><img src="http://oifuxc6w5.bkt.clouddn.com/newtheme.png" alt=""><p></p>
<p></p><h2 id="5">部署代码到github</h2><br><code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>生成SSH秘钥<br>在<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> 添加id_rsa.pub中的秘钥<br>安装插件：<br><code>npm install hexo -server --save</code><br><code>npm install hexo-deployer-git --save</code><br>安装其他插件的格式为<code>npm install ... --save</code><br>编辑全局 hexo 的配置文件：<code>_config.yml</code><br>注意<code>:</code>后留一个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type: git</div><div class="line">repository: https://github.com/BalianCheng/BalianCheng.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure><p></p>
<p>编辑全局配置后需要重新部署：<br>清除掉已经生成的文件：<code>hexo clean</code><br>再生成静态文件：<code>hexo generate</code><br>预览：<code>hexo server</code><br>打开<code>localhost:4000</code>查看<br>部署：<code>hexo deploy</code><br>生成 40 4页面：<code>hexo new page 404</code><br>生成 about 页面：<code>hexo new page about</code><br>生成 tag 标签云页面：<code>hexo new page tags</code><br>安装RSS订阅：<code>npm install hexo-generator-feed --save</code>安装插件，自动生成atom.xml，提供订阅</p>
<p></p><h2 id="6">绑定域名</h2><br><code>ping yourname.github.io</code>获得IP地址并使用域名解析<br>进入GitHub项目,进入<code>Settings</code>,在<code>Custom domain</code>写入域名<br>在\blog\public下建立CNAME文件写入域名<br>将CNAME放入\blog\source\中避免重复操作<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文从安装环境开始详细讲述如何使用github pages + Hexo搭建自己的静态博客，并且使用阿里云绑定域名。&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="http://www.codingbalian.online/categories/github/"/>
    
    
      <category term="hexo" scheme="http://www.codingbalian.online/tags/hexo/"/>
    
  </entry>
  
</feed>
